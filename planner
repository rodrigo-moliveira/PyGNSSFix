tasks for preliminary version:
    [X] testar o Iono free SPS: ter a certeza de que o tgd é 0 e o DI é 0.
    [X] Implementar o Dual Frequency SPS GPS
    [ ] re-adicionar o filtro de elevation no gnss_solver
    [ ] escrever um traceback dos filtros do preprocessor
    [ ] limpar o código / solve all TODOs

adicionar GAL SPS
    [X] ler dados de navegacao de gal
    [ ] implementar o nequickG
        https://github.com/tpl2go/NequickG
    [ ] melhorar o tratamento dos DCBs (criar uma classe onde tenha um getter...)
    [ ] até posso colocar já aqui o DCB reader
    [ ] implementar o GAL SPS (com ISB estimation)
    [X] criar uma class LSQ Engine que faz o preenchimento das matrizes de estado do LSQ, com mapas de indices mais bem feitinhos
    [ ] tropo wet/dry estimation?

ISTO TERMINA A VERSAO PRELIMINAR
--- ### ---

post-processing tasks:
    [ ] plot Iono states
    [ ] compute mean and std of pre/postfit residuals -> mean should be zero. STD should be sigma_URE (user range error). This should be computed for each satellite
    [ ] plot residuals
    [ ] plot position covariance (3D plot, 2D surfaces, etc...)
    [ ] plot 3d sigma of estimation error
    [ ] compute allan variance of clock bias

caminhar para PPPP:
    [ ] criar um config field com o modo (SPS ou PPPP)
    [ ] Adicionar Leitura e Modelo de Clocks, Sp3, IONEX (criar um PPPP)
    [ ] substituir alguns modelos do SPS pelos respetivos do PPPP
    [ ] ler sat DCBs e criar uma classe que substitua o modelo atual

finalizar o GNSS user positioning com:
    [ ] Adicionar Kalman filter com user dynamics
    [ ] process doppler measurements to estimate velocity


loosely coupled:
    [ ] attitude basics
    [ ] sensor emulator
    [ ] INS
    [ ] loosely coupled

...
    [ ] adicionar processamento de carrier phase - PPP